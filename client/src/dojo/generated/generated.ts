/* Autogenerated file. Do not edit manually. */
import { AccountInterface } from "starknet";
import { DojoProvider } from "@dojoengine/core";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export async function setupWorld(provider: DojoProvider) {
    function actions() {
        const spawn = async ({
            account,
            name,
        }: {
            account: AccountInterface;
            name: string;
        }) => {
            try {
                const { transaction_hash } = await provider.execute(account, {
                    contractName: "actions",
                    entrypoint: "spawn",
                    calldata: [name],
                });
                await account.waitForTransaction(transaction_hash, {
                    retryInterval: 100,
                });
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };

        const rebirth = async ({
            account,
            name,
        }: {
            account: AccountInterface;
            name: string;
        }) => {
            try {
                const { transaction_hash } = await provider.execute(account, {
                    contractName: "actions",
                    entrypoint: "rebirth",
                    calldata: [name],
                });
                await account.waitForTransaction(transaction_hash, {
                    retryInterval: 100,
                });
            } catch (error) {
                console.error("Error executing rebirth:", error);
                throw error;
            }
        };

        const buyItem = async ({
            account,
            itemId,
        }: {
            account: AccountInterface;
            itemId: number;
        }) => {
            try {
                const { transaction_hash } = await provider.execute(account, {
                    contractName: "actions",
                    entrypoint: "buy_item",
                    calldata: [itemId],
                });
                await account.waitForTransaction(transaction_hash, {
                    retryInterval: 100,
                });
            } catch (error) {
                console.error("Error executing buyItem:", error);
                throw error;
            }
        };

        const sellItem = async ({
            account,
            storageItemId,
        }: {
            account: AccountInterface;
            storageItemId: number;
        }) => {
            try {
                const { transaction_hash } = await provider.execute(account, {
                    contractName: "actions",
                    entrypoint: "sell_item",
                    calldata: [storageItemId],
                });
                await account.waitForTransaction(transaction_hash, {
                    retryInterval: 100,
                });
            } catch (error) {
                console.error("Error executing sellItem:", error);
                throw error;
            }
        };

        const rerollShop = async ({
            account,
        }: {
            account: AccountInterface;
        }) => {
            try {
                const { transaction_hash } = await provider.execute(account, {
                    contractName: "actions",
                    entrypoint: "reroll_shop",
                    calldata: [],
                });
                await account.waitForTransaction(transaction_hash, {
                    retryInterval: 100,
                });
            } catch (error) {
                console.error("Error executing rerollShop:", error);
                throw error;
            }
        };

        const placeItem = async ({
            account,
            storageItemId,
            x,
            y,
            rotation,
        }: {
            account: AccountInterface;
            storageItemId: number;
            x: number;
            y: number;
            rotation: number;
        }) => {
            try {
                const { transaction_hash } = await provider.execute(account, {
                    contractName: "actions",
                    entrypoint: "place_item",
                    calldata: [storageItemId, x, y, rotation],
                });
                await account.waitForTransaction(transaction_hash, {
                    retryInterval: 100,
                });
            } catch (error) {
                console.error("Error executing placeItem:", error);
                throw error;
            }
        };

        const undoPlaceItem = async ({
            account,
            inventoryItemId,
        }: {
            account: AccountInterface;
            inventoryItemId: number;
        }) => {
            try {
                const { transaction_hash } = await provider.execute(account, {
                    contractName: "actions",
                    entrypoint: "undo_place_item",
                    calldata: [inventoryItemId],
                });
                await account.waitForTransaction(transaction_hash, {
                    retryInterval: 100,
                });
            } catch (error) {
                console.error("Error executing undoPlaceItem:", error);
                throw error;
            }
        };

        const createDummy = async ({
            account,
        }: {
            account: AccountInterface;
        }) => {
            try {
                const { transaction_hash } = await provider.execute(account, {
                    contractName: "battle",
                    entrypoint: "create_dummy",
                    calldata: [],
                });
                await account.waitForTransaction(transaction_hash, {
                    retryInterval: 100,
                });
            } catch (error) {
                console.error("Error executing createDummy:", error);
                throw error;
            }
        };

        const fight = async ({ account }: { account: AccountInterface }) => {
            try {
                const { transaction_hash } = await provider.execute(account, {
                    contractName: "battle",
                    entrypoint: "fight",
                    calldata: [],
                });
                await account.waitForTransaction(transaction_hash, {
                    retryInterval: 100,
                });
                console.log("transaction_hash", transaction_hash);
            } catch (error) {
                console.error("Error executing fight:", error);
                throw error;
            }
        };

        return {
            spawn,
            rebirth,
            buyItem,
            sellItem,
            rerollShop,
            placeItem,
            undoPlaceItem,
            createDummy,
            fight,
        };
    }

    return {
        actions: actions(),
    };
}

