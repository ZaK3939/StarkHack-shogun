/* Autogenerated file. Do not edit manually. */
import { AccountInterface } from 'starknet';
import { DojoProvider } from '@dojoengine/core';

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export async function setupWorld(provider: DojoProvider) {
  function actions() {
    const spawn = async ({ account, name, wmClass }: { account: AccountInterface; name: string; wmClass: number }) => {
      try {
        return await provider.execute(account, {
          contractName: 'actions',
          entrypoint: 'spawn',
          calldata: [name, wmClass],
        });
      } catch (error) {
        console.error('Error executing spawn:', error);
        throw error;
      }
    };

    const rebirth = async ({
      account,
      name,
      wmClass,
    }: {
      account: AccountInterface;
      name: string;
      wmClass: number;
    }) => {
      try {
        return await provider.execute(account, {
          contractName: 'actions',
          entrypoint: 'rebirth',
          calldata: [name, wmClass],
        });
      } catch (error) {
        console.error('Error executing rebirth:', error);
        throw error;
      }
    };

    const buyItem = async ({ account, itemId }: { account: AccountInterface; itemId: number }) => {
      try {
        return await provider.execute(account, {
          contractName: 'actions',
          entrypoint: 'buy_item',
          calldata: [itemId],
        });
      } catch (error) {
        console.error('Error executing buyItem:', error);
        throw error;
      }
    };

    const sellItem = async ({ account, storageItemId }: { account: AccountInterface; storageItemId: number }) => {
      try {
        return await provider.execute(account, {
          contractName: 'actions',
          entrypoint: 'sell_item',
          calldata: [storageItemId],
        });
      } catch (error) {
        console.error('Error executing sellItem:', error);
        throw error;
      }
    };

    const rerollShop = async ({ account }: { account: AccountInterface }) => {
      try {
        return await provider.execute(account, {
          contractName: 'actions',
          entrypoint: 'reroll_shop',
          calldata: [],
        });
      } catch (error) {
        console.error('Error executing rerollShop:', error);
        throw error;
      }
    };

    const placeItem = async ({
      account,
      storageItemId,
      x,
      y,
      rotation,
    }: {
      account: AccountInterface;
      storageItemId: number;
      x: number;
      y: number;
      rotation: number;
    }) => {
      try {
        return await provider.execute(account, {
          contractName: 'actions',
          entrypoint: 'place_item',
          calldata: [storageItemId, x, y, rotation],
        });
      } catch (error) {
        console.error('Error executing placeItem:', error);
        throw error;
      }
    };

    const undoPlaceItem = async ({
      account,
      inventoryItemId,
    }: {
      account: AccountInterface;
      inventoryItemId: number;
    }) => {
      try {
        return await provider.execute(account, {
          contractName: 'actions',
          entrypoint: 'undo_place_item',
          calldata: [inventoryItemId],
        });
      } catch (error) {
        console.error('Error executing undoPlaceItem:', error);
        throw error;
      }
    };

    return { spawn, rebirth, buyItem, sellItem, rerollShop, placeItem, undoPlaceItem };
  }

  return {
    actions: actions(),
  };
}
